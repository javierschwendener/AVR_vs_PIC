

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Aug 25 21:29:10 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.40
    14                           ; Generated 17/11/2021 GMT
    15                           ; 
    16                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0005                     _PORTAbits	set	5
   205  0008                     _PORTD	set	8
   206  0006                     _PORTB	set	6
   207  0005                     _PORTA	set	5
   208  008F                     _OSCCONbits	set	143
   209  0088                     _TRISD	set	136
   210  0086                     _TRISB	set	134
   211  0085                     _TRISA	set	133
   212  0189                     _ANSELH	set	393
   213  0188                     _ANSEL	set	392
   214                           
   215                           	psect	cinit
   216  07F8                     start_initialization:	
   217                           ; #config settings
   218                           
   219  07F8                     __initialization:
   220                           
   221                           ; Clear objects allocated to COMMON
   222  07F8  01F0               	clrf	__pbssCOMMON& (0+127)
   223  07F9  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   224  07FA  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   225  07FB  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   226  07FC                     end_of_initialization:	
   227                           ;End of C runtime variable initialization code
   228                           
   229  07FC                     __end_of__initialization:
   230  07FC  0183               	clrf	3
   231  07FD  120A  118A  2F51   	ljmp	_main	;jump to C main() function
   232                           
   233                           	psect	bssCOMMON
   234  0070                     __pbssCOMMON:
   235  0070                     _infnibble:
   236  0070                     	ds	2
   237  0072                     _supnibble:
   238  0072                     	ds	2
   239                           
   240                           	psect	cstackCOMMON
   241  0074                     __pcstackCOMMON:
   242  0074                     ?_setup:
   243  0074                     ??_setup:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0074                     ?_main:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0074                     ??_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254  0074                     	ds	1
   255                           
   256                           	psect	maintext
   257  0751                     __pmaintext:	
   258 ;;
   259 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   260 ;;
   261 ;; *************** function _main *****************
   262 ;; Defined at:
   263 ;;		line 44 in file "main.c"
   264 ;; Parameters:    Size  Location     Type
   265 ;;		None
   266 ;; Auto vars:     Size  Location     Type
   267 ;;		None
   268 ;; Return value:  Size  Location     Type
   269 ;;                  1    wreg      void 
   270 ;; Registers used:
   271 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   272 ;; Tracked objects:
   273 ;;		On entry : B00/0
   274 ;;		On exit  : 0/0
   275 ;;		Unchanged: 0/0
   276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   277 ;;      Params:         0       0       0       0       0
   278 ;;      Locals:         0       0       0       0       0
   279 ;;      Temps:          1       0       0       0       0
   280 ;;      Totals:         1       0       0       0       0
   281 ;;Total ram usage:        1 bytes
   282 ;; Hardware stack levels required when called: 1
   283 ;; This function calls:
   284 ;;		_setup
   285 ;; This function is called by:
   286 ;;		Startup code after reset
   287 ;; This function uses a non-reentrant model
   288 ;;
   289                           
   290  0751                     _main:	
   291                           ;psect for function _main
   292                           
   293  0751                     l669:	
   294                           ;incstack = 0
   295                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   296                           
   297                           
   298                           ;main.c: 45:     setup();
   299  0751  120A  118A  273E  120A  118A  	fcall	_setup
   300  0756                     l671:
   301                           
   302                           ;main.c: 49:         if(PORTAbits.RA0 == 1){
   303  0756  1283               	bcf	3,5	;RP0=0, select bank0
   304  0757  1303               	bcf	3,6	;RP1=0, select bank0
   305  0758  1C05               	btfss	5,0	;volatile
   306  0759  2F5B               	goto	u11
   307  075A  2F5C               	goto	u10
   308  075B                     u11:
   309  075B  2F66               	goto	l36
   310  075C                     u10:
   311  075C                     l673:
   312                           
   313                           ;main.c: 50:             infnibble = infnibble + 1;
   314  075C  0870               	movf	_infnibble,w
   315  075D  3E01               	addlw	1
   316  075E  00F0               	movwf	_infnibble
   317  075F  0871               	movf	_infnibble+1,w
   318  0760  1803               	skipnc
   319  0761  3E01               	addlw	1
   320  0762  3E00               	addlw	0
   321  0763  00F1               	movwf	_infnibble+1
   322  0764  2F66               	goto	l36
   323  0765                     l37:
   324                           
   325                           ;main.c: 54:             __nop();
   326  0765  0000               	nop
   327  0766                     l36:	
   328                           ;main.c: 55:         }
   329                           
   330                           
   331                           ;main.c: 53:         while(PORTAbits.RA0 == 1){
   332  0766  1283               	bcf	3,5	;RP0=0, select bank0
   333  0767  1303               	bcf	3,6	;RP1=0, select bank0
   334  0768  1805               	btfsc	5,0	;volatile
   335  0769  2F6B               	goto	u21
   336  076A  2F6C               	goto	u20
   337  076B                     u21:
   338  076B  2F65               	goto	l37
   339  076C                     u20:
   340  076C                     l675:
   341                           
   342                           ;main.c: 57:         if (infnibble > 15){
   343  076C  0871               	movf	_infnibble+1,w
   344  076D  3A80               	xorlw	128
   345  076E  00FF               	movwf	btemp+1
   346  076F  3080               	movlw	128
   347  0770  027F               	subwf	btemp+1,w
   348  0771  1D03               	skipz
   349  0772  2F75               	goto	u35
   350  0773  3010               	movlw	16
   351  0774  0270               	subwf	_infnibble,w
   352  0775                     u35:
   353  0775  1C03               	skipc
   354  0776  2F78               	goto	u31
   355  0777  2F79               	goto	u30
   356  0778                     u31:
   357  0778  2F7B               	goto	l679
   358  0779                     u30:
   359  0779                     l677:
   360                           
   361                           ;main.c: 58:             infnibble = 0;
   362  0779  01F0               	clrf	_infnibble
   363  077A  01F1               	clrf	_infnibble+1
   364  077B                     l679:
   365                           
   366                           ;main.c: 61:         if(PORTAbits.RA1 == 1){
   367  077B  1283               	bcf	3,5	;RP0=0, select bank0
   368  077C  1303               	bcf	3,6	;RP1=0, select bank0
   369  077D  1C85               	btfss	5,1	;volatile
   370  077E  2F80               	goto	u41
   371  077F  2F81               	goto	u40
   372  0780                     u41:
   373  0780  2F8B               	goto	l41
   374  0781                     u40:
   375  0781                     l681:
   376                           
   377                           ;main.c: 62:             infnibble = infnibble - 1;
   378  0781  0870               	movf	_infnibble,w
   379  0782  3EFF               	addlw	255
   380  0783  00F0               	movwf	_infnibble
   381  0784  0871               	movf	_infnibble+1,w
   382  0785  1803               	skipnc
   383  0786  3E01               	addlw	1
   384  0787  3EFF               	addlw	255
   385  0788  00F1               	movwf	_infnibble+1
   386  0789  2F8B               	goto	l41
   387  078A                     l42:
   388                           
   389                           ;main.c: 66:             __nop();
   390  078A  0000               	nop
   391  078B                     l41:	
   392                           ;main.c: 67:         }
   393                           
   394                           
   395                           ;main.c: 65:         while(PORTAbits.RA1 == 1){
   396  078B  1283               	bcf	3,5	;RP0=0, select bank0
   397  078C  1303               	bcf	3,6	;RP1=0, select bank0
   398  078D  1885               	btfsc	5,1	;volatile
   399  078E  2F90               	goto	u51
   400  078F  2F91               	goto	u50
   401  0790                     u51:
   402  0790  2F8A               	goto	l42
   403  0791                     u50:
   404  0791                     l43:
   405                           
   406                           ;main.c: 69:         if(infnibble < 0){
   407  0791  1FF1               	btfss	_infnibble+1,7
   408  0792  2F94               	goto	u61
   409  0793  2F95               	goto	u60
   410  0794                     u61:
   411  0794  2F99               	goto	l685
   412  0795                     u60:
   413  0795                     l683:
   414                           
   415                           ;main.c: 70:             infnibble = 15;
   416  0795  300F               	movlw	15
   417  0796  00F0               	movwf	_infnibble
   418  0797  3000               	movlw	0
   419  0798  00F1               	movwf	_infnibble+1
   420  0799                     l685:
   421                           
   422                           ;main.c: 74:         if(PORTAbits.RA2 == 1){
   423  0799  1D05               	btfss	5,2	;volatile
   424  079A  2F9C               	goto	u71
   425  079B  2F9D               	goto	u70
   426  079C                     u71:
   427  079C  2FA7               	goto	l46
   428  079D                     u70:
   429  079D                     l687:
   430                           
   431                           ;main.c: 75:             supnibble = supnibble + 1;
   432  079D  0872               	movf	_supnibble,w
   433  079E  3E01               	addlw	1
   434  079F  00F2               	movwf	_supnibble
   435  07A0  0873               	movf	_supnibble+1,w
   436  07A1  1803               	skipnc
   437  07A2  3E01               	addlw	1
   438  07A3  3E00               	addlw	0
   439  07A4  00F3               	movwf	_supnibble+1
   440  07A5  2FA7               	goto	l46
   441  07A6                     l47:
   442                           
   443                           ;main.c: 79:             __nop();
   444  07A6  0000               	nop
   445  07A7                     l46:	
   446                           ;main.c: 80:         }
   447                           
   448                           
   449                           ;main.c: 78:         while(PORTAbits.RA2 == 1){
   450  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   451  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   452  07A9  1905               	btfsc	5,2	;volatile
   453  07AA  2FAC               	goto	u81
   454  07AB  2FAD               	goto	u80
   455  07AC                     u81:
   456  07AC  2FA6               	goto	l47
   457  07AD                     u80:
   458  07AD                     l689:
   459                           
   460                           ;main.c: 81:         if (supnibble > 15){
   461  07AD  0873               	movf	_supnibble+1,w
   462  07AE  3A80               	xorlw	128
   463  07AF  00FF               	movwf	btemp+1
   464  07B0  3080               	movlw	128
   465  07B1  027F               	subwf	btemp+1,w
   466  07B2  1D03               	skipz
   467  07B3  2FB6               	goto	u95
   468  07B4  3010               	movlw	16
   469  07B5  0272               	subwf	_supnibble,w
   470  07B6                     u95:
   471  07B6  1C03               	skipc
   472  07B7  2FB9               	goto	u91
   473  07B8  2FBA               	goto	u90
   474  07B9                     u91:
   475  07B9  2FBC               	goto	l693
   476  07BA                     u90:
   477  07BA                     l691:
   478                           
   479                           ;main.c: 82:             supnibble = 0;
   480  07BA  01F2               	clrf	_supnibble
   481  07BB  01F3               	clrf	_supnibble+1
   482  07BC                     l693:
   483                           
   484                           ;main.c: 85:         if(PORTAbits.RA3 == 1){
   485  07BC  1283               	bcf	3,5	;RP0=0, select bank0
   486  07BD  1303               	bcf	3,6	;RP1=0, select bank0
   487  07BE  1D85               	btfss	5,3	;volatile
   488  07BF  2FC1               	goto	u101
   489  07C0  2FC2               	goto	u100
   490  07C1                     u101:
   491  07C1  2FCC               	goto	l51
   492  07C2                     u100:
   493  07C2                     l695:
   494                           
   495                           ;main.c: 86:             supnibble = supnibble - 1;
   496  07C2  0872               	movf	_supnibble,w
   497  07C3  3EFF               	addlw	255
   498  07C4  00F2               	movwf	_supnibble
   499  07C5  0873               	movf	_supnibble+1,w
   500  07C6  1803               	skipnc
   501  07C7  3E01               	addlw	1
   502  07C8  3EFF               	addlw	255
   503  07C9  00F3               	movwf	_supnibble+1
   504  07CA  2FCC               	goto	l51
   505  07CB                     l52:
   506                           
   507                           ;main.c: 90:             __nop();
   508  07CB  0000               	nop
   509  07CC                     l51:	
   510                           ;main.c: 91:         }
   511                           
   512                           
   513                           ;main.c: 89:         while(PORTAbits.RA3 == 1){
   514  07CC  1283               	bcf	3,5	;RP0=0, select bank0
   515  07CD  1303               	bcf	3,6	;RP1=0, select bank0
   516  07CE  1985               	btfsc	5,3	;volatile
   517  07CF  2FD1               	goto	u111
   518  07D0  2FD2               	goto	u110
   519  07D1                     u111:
   520  07D1  2FCB               	goto	l52
   521  07D2                     u110:
   522  07D2                     l53:
   523                           
   524                           ;main.c: 93:         if(supnibble < 0){
   525  07D2  1FF3               	btfss	_supnibble+1,7
   526  07D3  2FD5               	goto	u121
   527  07D4  2FD6               	goto	u120
   528  07D5                     u121:
   529  07D5  2FDA               	goto	l699
   530  07D6                     u120:
   531  07D6                     l697:
   532                           
   533                           ;main.c: 94:             supnibble = 15;
   534  07D6  300F               	movlw	15
   535  07D7  00F2               	movwf	_supnibble
   536  07D8  3000               	movlw	0
   537  07D9  00F3               	movwf	_supnibble+1
   538  07DA                     l699:
   539                           
   540                           ;main.c: 98:         PORTD = (16*supnibble) + infnibble;
   541  07DA  0872               	movf	_supnibble,w
   542  07DB  00F4               	movwf	??_main
   543  07DC  3004               	movlw	4
   544  07DD                     u135:
   545  07DD  1003               	clrc
   546  07DE  0DF4               	rlf	??_main,f
   547  07DF  3EFF               	addlw	-1
   548  07E0  1D03               	skipz
   549  07E1  2FDD               	goto	u135
   550  07E2  0870               	movf	_infnibble,w
   551  07E3  0774               	addwf	??_main,w
   552  07E4  0088               	movwf	8	;volatile
   553  07E5                     l701:
   554                           
   555                           ;main.c: 101:         if(PORTAbits.RA4 == 1){
   556  07E5  1E05               	btfss	5,4	;volatile
   557  07E6  2FE8               	goto	u141
   558  07E7  2FE9               	goto	u140
   559  07E8                     u141:
   560  07E8  2FEE               	goto	l56
   561  07E9                     u140:
   562  07E9                     l703:
   563                           
   564                           ;main.c: 102:             PORTB = supnibble + infnibble;
   565  07E9  0870               	movf	_infnibble,w
   566  07EA  0772               	addwf	_supnibble,w
   567  07EB  0086               	movwf	6	;volatile
   568  07EC  2FEE               	goto	l56
   569  07ED                     l57:
   570                           
   571                           ;main.c: 106:             __nop();
   572  07ED  0000               	nop
   573  07EE                     l56:	
   574                           ;main.c: 107:         }
   575                           
   576                           
   577                           ;main.c: 105:         while(PORTAbits.RA4 == 1){
   578  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   579  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   580  07F0  1A05               	btfsc	5,4	;volatile
   581  07F1  2FF3               	goto	u151
   582  07F2  2FF4               	goto	u150
   583  07F3                     u151:
   584  07F3  2FED               	goto	l57
   585  07F4                     u150:
   586  07F4  2F56               	goto	l671
   587  07F5  120A  118A  2800   	ljmp	start
   588  07F8                     __end_of_main:
   589                           
   590                           	psect	text1
   591  073E                     __ptext1:	
   592 ;; *************** function _setup *****************
   593 ;; Defined at:
   594 ;;		line 29 in file "main.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, status,2
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       0       0       0       0
   609 ;;      Locals:         0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0
   611 ;;      Totals:         0       0       0       0       0
   612 ;;Total ram usage:        0 bytes
   613 ;; Hardware stack levels used: 1
   614 ;; This function calls:
   615 ;;		Nothing
   616 ;; This function is called by:
   617 ;;		_main
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621  073E                     _setup:	
   622                           ;psect for function _setup
   623                           
   624  073E                     l653:	
   625                           ;incstack = 0
   626                           ; Regs used in _setup: [wreg+status,2]
   627                           
   628                           
   629                           ;main.c: 30:     ANSEL = 0;
   630  073E  1683               	bsf	3,5	;RP0=1, select bank3
   631  073F  1703               	bsf	3,6	;RP1=1, select bank3
   632  0740  0188               	clrf	8	;volatile
   633                           
   634                           ;main.c: 31:     ANSELH = 0;
   635  0741  0189               	clrf	9	;volatile
   636                           
   637                           ;main.c: 32:     PORTA = 0;
   638  0742  1283               	bcf	3,5	;RP0=0, select bank0
   639  0743  1303               	bcf	3,6	;RP1=0, select bank0
   640  0744  0185               	clrf	5	;volatile
   641                           
   642                           ;main.c: 33:     PORTB = 0;
   643  0745  0186               	clrf	6	;volatile
   644                           
   645                           ;main.c: 34:     PORTD = 0;
   646  0746  0188               	clrf	8	;volatile
   647  0747                     l655:
   648                           
   649                           ;main.c: 35:     TRISA = 0b00011111;
   650  0747  301F               	movlw	31
   651  0748  1683               	bsf	3,5	;RP0=1, select bank1
   652  0749  1303               	bcf	3,6	;RP1=0, select bank1
   653  074A  0085               	movwf	5	;volatile
   654  074B                     l657:
   655                           
   656                           ;main.c: 36:     TRISB = 0;
   657  074B  0186               	clrf	6	;volatile
   658  074C                     l659:
   659                           
   660                           ;main.c: 37:     TRISD = 0;
   661  074C  0188               	clrf	8	;volatile
   662  074D                     l661:
   663                           
   664                           ;main.c: 38:     OSCCONbits.IRCF0 = 1;
   665  074D  160F               	bsf	15,4	;volatile
   666  074E                     l663:
   667                           
   668                           ;main.c: 39:     OSCCONbits.IRCF1 = 1;
   669  074E  168F               	bsf	15,5	;volatile
   670  074F                     l665:
   671                           
   672                           ;main.c: 40:     OSCCONbits.IRCF2 = 1;
   673  074F  170F               	bsf	15,6	;volatile
   674  0750                     l29:
   675  0750  0008               	return
   676  0751                     __end_of_setup:
   677  007E                     btemp	set	126	;btemp
   678  007E                     wtemp0	set	126
   679                           
   680                           	psect	idloc
   681                           
   682                           ;Config register IDLOC0 @ 0x2000
   683                           ;	unspecified, using default values
   684  2000                     	org	8192
   685  2000  3FFF               	dw	16383
   686                           
   687                           ;Config register IDLOC1 @ 0x2001
   688                           ;	unspecified, using default values
   689  2001                     	org	8193
   690  2001  3FFF               	dw	16383
   691                           
   692                           ;Config register IDLOC2 @ 0x2002
   693                           ;	unspecified, using default values
   694  2002                     	org	8194
   695  2002  3FFF               	dw	16383
   696                           
   697                           ;Config register IDLOC3 @ 0x2003
   698                           ;	unspecified, using default values
   699  2003                     	org	8195
   700  2003  3FFF               	dw	16383
   701                           
   702                           	psect	config
   703                           
   704                           ;Config register CONFIG1 @ 0x2007
   705                           ;	Oscillator Selection bits
   706                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   707                           ;	Watchdog Timer Enable bit
   708                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   709                           ;	Power-up Timer Enable bit
   710                           ;	PWRTE = OFF, PWRT disabled
   711                           ;	RE3/MCLR pin function select bit
   712                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   713                           ;	Code Protection bit
   714                           ;	CP = OFF, Program memory code protection is disabled
   715                           ;	Data Code Protection bit
   716                           ;	CPD = OFF, Data memory code protection is disabled
   717                           ;	Brown Out Reset Selection bits
   718                           ;	BOREN = OFF, BOR disabled
   719                           ;	Internal External Switchover bit
   720                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   721                           ;	Fail-Safe Clock Monitor Enabled bit
   722                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   723                           ;	Low Voltage Programming Enable bit
   724                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   725                           ;	In-Circuit Debugger Mode bit
   726                           ;	DEBUG = 0x1, unprogrammed default
   727  2007                     	org	8199
   728  2007  20D4               	dw	8404
   729                           
   730                           ;Config register CONFIG2 @ 0x2008
   731                           ;	Brown-out Reset Selection bit
   732                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   733                           ;	Flash Program Memory Self Write Enable bits
   734                           ;	WRT = OFF, Write protection off
   735  2008                     	org	8200
   736  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      1       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 COMMON     1     1      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      1       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       5      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Aug 25 21:29:10 2022

                     l41 078B                       l42 078A                       l51 07CC  
                     l43 0791                       l52 07CB                       l36 0766  
                     l29 0750                       l53 07D2                       l37 0765  
                     l46 07A7                       l47 07A6                       l56 07EE  
                     l57 07ED                       u10 075C                       u11 075B  
                     u20 076C                       u21 076B                       u30 0779  
                     u31 0778                       u40 0781                       u41 0780  
                     u50 0791                       u51 0790                       u35 0775  
                     u60 0795                       u61 0794                       u70 079D  
                     u71 079C                       u80 07AD                       u81 07AC  
                     u90 07BA                       u91 07B9                       u95 07B6  
                    l701 07E5                      l703 07E9                      l661 074D  
                    l653 073E                      l663 074E                      l655 0747  
                    l671 0756                      l665 074F                      l657 074B  
                    l681 0781                      l673 075C                      l659 074C  
                    l691 07BA                      l683 0795                      l675 076C  
                    l693 07BC                      l685 0799                      l677 0779  
                    l669 0751                      l695 07C2                      l687 079D  
                    l679 077B                      l697 07D6                      l689 07AD  
                    l699 07DA                      u100 07C2                      u101 07C1  
                    u110 07D2                      u111 07D1                      u120 07D6  
                    u121 07D5                      u140 07E9                      u141 07E8  
                    u150 07F4                      u151 07F3                      u135 07DD  
                   _main 0751                     btemp 007E                     start 0000  
                  ?_main 0074                    _ANSEL 0188                    _PORTA 0005  
                  _PORTB 0006                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISD 0088                    _setup 073E  
                  status 0003                    wtemp0 007E          __initialization 07F8  
           __end_of_main 07F8                   ??_main 0074                   ?_setup 0074  
                 _ANSELH 0189  __end_of__initialization 07FC           __pcstackCOMMON 0074  
          __end_of_setup 0751                  ??_setup 0074               __pmaintext 0751  
                __ptext1 073E     end_of_initialization 07FC                _PORTAbits 0005  
    start_initialization 07F8              __pbssCOMMON 0070                ___latbits 0002  
              _infnibble 0070                _supnibble 0072               _OSCCONbits 008F  
