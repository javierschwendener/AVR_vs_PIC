
InterrupcionesDePuertos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ee  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000242  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000010a  0000010a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setup   00000012  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.pini_set 0000000e  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000000a  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_5 0000000e  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000112  00000112  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_5>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	e8 e6       	ldi	r30, 0x68	; 104
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	17 c0       	rjmp	.+46     	; 0xaa <__do_clear_bss+0x8>
  7c:	b5 91       	lpm	r27, Z+
  7e:	a5 91       	lpm	r26, Z+
  80:	35 91       	lpm	r19, Z+
  82:	25 91       	lpm	r18, Z+
  84:	05 91       	lpm	r16, Z+
  86:	07 fd       	sbrc	r16, 7
  88:	0c c0       	rjmp	.+24     	; 0xa2 <__do_clear_bss>
  8a:	95 91       	lpm	r25, Z+
  8c:	85 91       	lpm	r24, Z+
  8e:	ef 01       	movw	r28, r30
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0x20>
  9e:	fe 01       	movw	r30, r28
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__do_clear_bss+0x8>

000000a2 <__do_clear_bss>:
  a2:	1d 92       	st	X+, r1
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__do_clear_bss>
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f4 07       	cpc	r31, r20
  ae:	31 f7       	brne	.-52     	; 0x7c <__do_copy_data+0x8>
  b0:	0e 94 80 00 	call	0x100	; 0x100 <main>
  b4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_etext>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>

Disassembly of section .text:

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

000000d2 <setup>:
/*VARIABLES*/
int counter = 0;

void setup(void){
	// Puertos B y C como salidas
	DDRB = 0b11111111;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
  d6:	87 b9       	out	0x07, r24	; 7
	// Puerto D como entrada
	DDRD = 0b00000000;
  d8:	1a b8       	out	0x0a, r1	; 10
	// Se establece el valor de los puertos como 0
	PORTB = 0;
  da:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  dc:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
  de:	1b b8       	out	0x0b, r1	; 11
	sei();
  e0:	78 94       	sei
  e2:	08 95       	ret

Disassembly of section .text.pini_set:

000000e4 <pini_set>:
    while(1){
	}
}

void pini_set(void){
	PCICR = 0B00000100;
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = 0B00000001;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
  f0:	08 95       	ret

Disassembly of section .text.main:

00000100 <main>:
}

int main(void)
{
	// Se ejecuta la configuracion de los puertos
	setup();
 100:	0e 94 69 00 	call	0xd2	; 0xd2 <setup>
	pini_set();
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <pini_set>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x8>

Disassembly of section .text.__vector_5:

000000f2 <__vector_5>:
	PCICR = 0B00000100;
	PCMSK2 = 0B00000001;
}

ISR(PCINT2_vect, ISR_NAKED){
	if(PIND & (1<<0)){
  f2:	48 9b       	sbis	0x09, 0	; 9
  f4:	03 c0       	rjmp	.+6      	; 0xfc <__vector_5+0xa>
		PORTB = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	01 c0       	rjmp	.+2      	; 0xfe <__vector_5+0xc>
	}
	else{
		PORTB = 0;
  fc:	15 b8       	out	0x05, r1	; 5
			PORTB = 1;
		}
	}
	*/
	
	reti();
  fe:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000112 <_fini>:
 112:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000114 <__funcs_on_exit>:
 114:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000116 <__simulator_exit>:
 116:	08 95       	ret

Disassembly of section .text.exit:

000000bc <exit>:
  bc:	ec 01       	movw	r28, r24
  be:	0e 94 8a 00 	call	0x114	; 0x114 <__funcs_on_exit>
  c2:	0e 94 89 00 	call	0x112	; 0x112 <_fini>
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 8b 00 	call	0x116	; 0x116 <__simulator_exit>
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 87 00 	call	0x10e	; 0x10e <_Exit>

Disassembly of section .text._Exit:

0000010e <_Exit>:
 10e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_exit>
