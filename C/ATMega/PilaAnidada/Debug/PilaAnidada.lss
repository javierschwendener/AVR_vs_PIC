
PilaAnidada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a8  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062c  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d9  00000000  00000000  000011e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setup   00000010  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.func7   00000004  000000e6  000000e6  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.func6   00000008  000000b2  000000b2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.func5   00000008  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.func4   00000008  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.func3   00000008  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.func2   00000008  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.func1   00000008  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    0000000c  000000a6  000000a6  0000011a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  000000ee  000000ee  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.setup:

00000096 <setup>:
/*VARIABLES*/


void setup(void){
	// Configuracion inicial de los puertos como salidas
	DDRB = 0b11111111;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
  9a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111111;
  9c:	8a b9       	out	0x0a, r24	; 10
	// Se establece el valor de los puertos como 0
	PORTB = 0;
  9e:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  a0:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
  a2:	1b b8       	out	0x0b, r1	; 11
  a4:	08 95       	ret

Disassembly of section .text.func7:

000000e6 <func7>:
	func7();
	return;
}

void func7(void){
	asm("nop");
  e6:	00 00       	nop
  e8:	08 95       	ret

Disassembly of section .text.func6:

000000b2 <func6>:
	func6();
	return;
}

void func6(void){
	asm("nop");
  b2:	00 00       	nop
	func7();
  b4:	0e 94 73 00 	call	0xe6	; 0xe6 <func7>
  b8:	08 95       	ret

Disassembly of section .text.func5:

000000ba <func5>:
	func5();
	return;
}

void func5(void){
	asm("nop");
  ba:	00 00       	nop
	func6();
  bc:	0e 94 59 00 	call	0xb2	; 0xb2 <func6>
  c0:	08 95       	ret

Disassembly of section .text.func4:

000000c2 <func4>:
	func4();
	return;
}

void func4(void){
	asm("nop");
  c2:	00 00       	nop
	func5();
  c4:	0e 94 5d 00 	call	0xba	; 0xba <func5>
  c8:	08 95       	ret

Disassembly of section .text.func3:

000000ca <func3>:
	func3();
	return;
}

void func3(void){
	asm("nop");
  ca:	00 00       	nop
	func4();
  cc:	0e 94 61 00 	call	0xc2	; 0xc2 <func4>
  d0:	08 95       	ret

Disassembly of section .text.func2:

000000d2 <func2>:
	func2();
	return;
}

void func2(void){
	asm("nop");
  d2:	00 00       	nop
	func3();
  d4:	0e 94 65 00 	call	0xca	; 0xca <func3>
  d8:	08 95       	ret

Disassembly of section .text.func1:

000000da <func1>:
		PORTD = 0;
    }
}

void func1(void){
	asm("nop");
  da:	00 00       	nop
	func2();
  dc:	0e 94 69 00 	call	0xd2	; 0xd2 <func2>
  e0:	08 95       	ret

Disassembly of section .text.main:

000000a6 <main>:
}

int main(void)
{
	// Se ejecuta la configuracion de los puertos
	setup();
  a6:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
    while(1)
    {
		// Inicio de la medicion
		PORTD0 >= 1;
		func1();
  aa:	0e 94 6d 00 	call	0xda	; 0xda <func1>
		// Fin de la medicion
		PORTD = 0;
  ae:	1b b8       	out	0x0b, r1	; 11
  b0:	fc cf       	rjmp	.-8      	; 0xaa <main+0x4>

Disassembly of section .text.__dummy_fini:

000000ee <_fini>:
  ee:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000f0 <__funcs_on_exit>:
  f0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000f2 <__simulator_exit>:
  f2:	08 95       	ret

Disassembly of section .text.exit:

00000080 <exit>:
  80:	ec 01       	movw	r28, r24
  82:	0e 94 78 00 	call	0xf0	; 0xf0 <__funcs_on_exit>
  86:	0e 94 77 00 	call	0xee	; 0xee <_fini>
  8a:	ce 01       	movw	r24, r28
  8c:	0e 94 79 00 	call	0xf2	; 0xf2 <__simulator_exit>
  90:	ce 01       	movw	r24, r28
  92:	0e 94 75 00 	call	0xea	; 0xea <_Exit>

Disassembly of section .text._Exit:

000000ea <_Exit>:
  ea:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
