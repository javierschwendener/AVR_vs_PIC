
TemporizadorSinInterrupciones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000207  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d9  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024a  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000136  00000136  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setup   00000010  0000011c  0000011c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.timer0_set 0000000a  0000012c  0000012c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000044  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.counter  00000002  00800100  00800100  000001d8  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  0000013e  0000013e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000140  00000140  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000142  00000142  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000106  00000106  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000013a  0000013a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
   8:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  10:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  14:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  18:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  20:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  24:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  28:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  30:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  3c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  40:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  44:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  48:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  4c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  50:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  54:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  58:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  5c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  60:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
  64:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 83 00 	jmp	0x106	; 0x106 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000136 <__bad_interrupt>:
 136:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

0000011c <setup>:
/*VARIABLES*/
int counter = 0;

void setup(void){
	// Puertos B y C como salidas
	DDRB = 0b11111111;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
 120:	87 b9       	out	0x07, r24	; 7
	// Puerto D como entrada
	DDRD = 0b00000000;
 122:	1a b8       	out	0x0a, r1	; 10
	// Se establece el valor de los puertos como 0
	PORTB = 0;
 124:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 126:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 128:	1b b8       	out	0x0b, r1	; 11
 12a:	08 95       	ret

Disassembly of section .text.timer0_set:

0000012c <timer0_set>:
		}
	}
}

void timer0_set(void){
	TCCR0A = 0B00000000;
 12c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0B00000101;
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 132:	16 bc       	out	0x26, r1	; 38
 134:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
}

int main(void)
{
	// Se ejecuta la configuracion de los puertos
	setup();
  c2:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
	timer0_set();
  c6:	0e 94 96 00 	call	0x12c	; 0x12c <timer0_set>
    while(1){
		if(TCNT0 == 128){
  ca:	86 b5       	in	r24, 0x26	; 38
  cc:	80 38       	cpi	r24, 0x80	; 128
  ce:	51 f4       	brne	.+20     	; 0xe4 <main+0x22>
			TCNT0 = 0;
  d0:	16 bc       	out	0x26, r1	; 38
			counter = counter + 1;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if(counter == 15){
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	0f 97       	sbiw	r24, 0x0f	; 15
  ee:	69 f7       	brne	.-38     	; 0xca <main+0x8>
			counter = 0;
  f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(PINB & (1<<0)){
  f8:	18 9b       	sbis	0x03, 0	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x3e>
				PORTB = 0;
  fc:	15 b8       	out	0x05, r1	; 5
  fe:	e5 cf       	rjmp	.-54     	; 0xca <main+0x8>
			}
			else{
				PORTB = 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	85 b9       	out	0x05, r24	; 5
 104:	e2 cf       	rjmp	.-60     	; 0xca <main+0x8>

Disassembly of section .text.__dummy_fini:

0000013e <_fini>:
 13e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000140 <__funcs_on_exit>:
 140:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000142 <__simulator_exit>:
 142:	08 95       	ret

Disassembly of section .text.exit:

00000106 <exit>:
 106:	ec 01       	movw	r28, r24
 108:	0e 94 a0 00 	call	0x140	; 0x140 <__funcs_on_exit>
 10c:	0e 94 9f 00 	call	0x13e	; 0x13e <_fini>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 a1 00 	call	0x142	; 0x142 <__simulator_exit>
 116:	ce 01       	movw	r24, r28
 118:	0e 94 9d 00 	call	0x13a	; 0x13a <_Exit>

Disassembly of section .text._Exit:

0000013a <_Exit>:
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
