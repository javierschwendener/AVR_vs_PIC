
PilaSimple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a7  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000226  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000c0  000000c0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setup   00000010  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.func1   00000008  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000012  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.setup:

000000a8 <setup>:
void func1(void);
/*VARIABLES*/

void setup(void){
	// Configuracion inicial de los puertos como salidas
	DDRB = 0b11111111;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
  ac:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111111;
  ae:	8a b9       	out	0x0a, r24	; 10
	// Se establece el valor de los puertos como 0
	PORTB = 0;
  b0:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  b2:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
  b4:	1b b8       	out	0x0b, r1	; 11
  b6:	08 95       	ret

Disassembly of section .text.func1:

000000b8 <func1>:
		PORTD = 0;
    }
}

void func1(void){
	PORTD |= 1<<PORTD1;
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

Disassembly of section .text.main:

00000096 <main>:
}

int main(void)
{
	// Se ejecuta la configuracion de los puertos
	setup();
  96:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
    while(1)
    {
		// Inicio de la medicion
		PORTD |= 1<<PORTD0;
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8b b9       	out	0x0b, r24	; 11
		func1();
  a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <func1>
		// Fin de la medicion
		PORTD = 0;
  a4:	1b b8       	out	0x0b, r1	; 11
  a6:	f9 cf       	rjmp	.-14     	; 0x9a <main+0x4>

Disassembly of section .text.__dummy_fini:

000000c8 <_fini>:
  c8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ca <__funcs_on_exit>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000cc <__simulator_exit>:
  cc:	08 95       	ret

Disassembly of section .text.exit:

00000080 <exit>:
  80:	ec 01       	movw	r28, r24
  82:	0e 94 65 00 	call	0xca	; 0xca <__funcs_on_exit>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <_fini>
  8a:	ce 01       	movw	r24, r28
  8c:	0e 94 66 00 	call	0xcc	; 0xcc <__simulator_exit>
  90:	ce 01       	movw	r24, r28
  92:	0e 94 62 00 	call	0xc4	; 0xc4 <_Exit>

Disassembly of section .text._Exit:

000000c4 <_Exit>:
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
