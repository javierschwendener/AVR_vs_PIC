
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fb  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a2  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000025a  0000025a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setup   00000010  0000023e  0000023e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.eeprom_write 00000022  000001e4  000001e4  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.eeprom_read 00000022  00000206  00000206  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000102  000000e2  000000e2  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.counter  00000002  00800100  00800100  000002fc  2**0
                  ALLOC
 18 .text.libgcc  0000000c  0000024e  0000024e  000002e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  00000262  00000262  000002f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000264  00000264  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000266  00000266  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000228  00000228  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  0000025e  0000025e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
   8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
   c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  54:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
  68:	b2 00       	.word	0x00b2	; ????
  6a:	b5 00       	.word	0x00b5	; ????
  6c:	b8 00       	.word	0x00b8	; ????
  6e:	bb 00       	.word	0x00bb	; ????
  70:	be 00       	.word	0x00be	; ????
  72:	c1 00       	.word	0x00c1	; ????
  74:	c4 00       	.word	0x00c4	; ????
  76:	c7 00       	.word	0x00c7	; ????
  78:	ca 00       	.word	0x00ca	; ????
  7a:	cd 00       	.word	0x00cd	; ????
  7c:	d0 00       	.word	0x00d0	; ????
  7e:	d3 00       	.word	0x00d3	; ????
  80:	d6 00       	.word	0x00d6	; ????
  82:	d9 00       	.word	0x00d9	; ????
  84:	dc 00       	.word	0x00dc	; ????
  86:	df 00       	.word	0x00df	; ????

00000088 <.dinit>:
  88:	01 00       	.word	0x0001	; ????
  8a:	01 02       	muls	r16, r17
  8c:	80 00       	.word	0x0080	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	e8 e8       	ldi	r30, 0x88	; 136
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	17 c0       	rjmp	.+46     	; 0xd0 <__do_clear_bss+0x8>
  a2:	b5 91       	lpm	r27, Z+
  a4:	a5 91       	lpm	r26, Z+
  a6:	35 91       	lpm	r19, Z+
  a8:	25 91       	lpm	r18, Z+
  aa:	05 91       	lpm	r16, Z+
  ac:	07 fd       	sbrc	r16, 7
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <__do_clear_bss>
  b0:	95 91       	lpm	r25, Z+
  b2:	85 91       	lpm	r24, Z+
  b4:	ef 01       	movw	r28, r30
  b6:	f9 2f       	mov	r31, r25
  b8:	e8 2f       	mov	r30, r24
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x20>
  c4:	fe 01       	movw	r30, r28
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__do_clear_bss+0x8>

000000c8 <__do_clear_bss>:
  c8:	1d 92       	st	X+, r1
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__do_clear_bss>
  d0:	ed 38       	cpi	r30, 0x8D	; 141
  d2:	f4 07       	cpc	r31, r20
  d4:	31 f7       	brne	.-52     	; 0xa2 <__do_copy_data+0x8>
  d6:	0e 94 71 00 	call	0xe2	; 0xe2 <_etext>
  da:	0c 94 14 01 	jmp	0x228	; 0x228 <exit>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>

Disassembly of section .text:

0000025a <__bad_interrupt>:
 25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.setup:

0000023e <setup>:
/*VARIABLES*/
int counter = 0;

void setup(void){
	// Puertos B y C como salidas
	DDRB = 0b11111111;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
 242:	87 b9       	out	0x07, r24	; 7
	// Puerto D como entrada
	DDRD = 0b00000000;
 244:	1a b8       	out	0x0a, r1	; 10
	// Se establece el valor de los puertos como 0
	PORTB = 0;
 246:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 248:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 24a:	1b b8       	out	0x0b, r1	; 11
 24c:	08 95       	ret

Disassembly of section .text.eeprom_write:

000001e4 <eeprom_write>:
		}
	}
}

void eeprom_write(void){
	PORTC = 0B00000001;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	88 b9       	out	0x08, r24	; 8
	while(EECR & (1<<EEPE)){
 1e8:	f9 99       	sbic	0x1f, 1	; 31
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <eeprom_write+0x4>
		
	}	
	EEAR = 0;
 1ec:	12 bc       	out	0x22, r1	; 34
 1ee:	11 bc       	out	0x21, r1	; 33
	EEDR = counter;
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f4:	80 bd       	out	0x20, r24	; 32
	
	EECR |= (1<<EEMPE);
 1f6:	8f b3       	in	r24, 0x1f	; 31
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE);
 1fc:	8f b3       	in	r24, 0x1f	; 31
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	8f bb       	out	0x1f, r24	; 31
	PORTC = 0B00000000;
 202:	18 b8       	out	0x08, r1	; 8
 204:	08 95       	ret

Disassembly of section .text.eeprom_read:

00000206 <eeprom_read>:
}

void eeprom_read(void){
	PORTC = 0B00000001;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	88 b9       	out	0x08, r24	; 8
	while(EECR & (1<<EEPE)){
 20a:	f9 99       	sbic	0x1f, 1	; 31
 20c:	fe cf       	rjmp	.-4      	; 0x20a <eeprom_read+0x4>
		
	}
	EEAR = 0;
 20e:	12 bc       	out	0x22, r1	; 34
 210:	11 bc       	out	0x21, r1	; 33
	EECR |= (1<<EERE);
 212:	8f b3       	in	r24, 0x1f	; 31
 214:	81 60       	ori	r24, 0x01	; 1
 216:	8f bb       	out	0x1f, r24	; 31
	counter = EEDR;
 218:	80 b5       	in	r24, 0x20	; 32
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTC = 0B00000000;
 224:	18 b8       	out	0x08, r1	; 8
 226:	08 95       	ret

Disassembly of section .text.main:

000000e2 <main>:
}

int main(void)
{
	// Se ejecuta la configuracion
	setup();
  e2:	0e 94 1f 01 	call	0x23e	; 0x23e <setup>
	// Loop
    while(1){
		if(PIND & (1<<0)){
  e6:	48 9b       	sbis	0x09, 0	; 9
  e8:	0b c0       	rjmp	.+22     	; 0x100 <main+0x1e>
			counter = counter + 1;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  fc:	01 c0       	rjmp	.+2      	; 0x100 <main+0x1e>
		}
		while(PIND & (1<<0)){
			asm("nop");
  fe:	00 00       	nop
	// Loop
    while(1){
		if(PIND & (1<<0)){
			counter = counter + 1;
		}
		while(PIND & (1<<0)){
 100:	48 99       	sbic	0x09, 0	; 9
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x1c>
			asm("nop");
		}
		
		if(counter == 16){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10c:	40 97       	sbiw	r24, 0x10	; 16
 10e:	21 f4       	brne	.+8      	; 0x118 <main+0x36>
			counter = 0;
 110:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 114:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		
		if(PIND & (1<<1)){
 118:	49 9b       	sbis	0x09, 1	; 9
 11a:	0b c0       	rjmp	.+22     	; 0x132 <main+0x50>
			counter = counter - 1;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12e:	01 c0       	rjmp	.+2      	; 0x132 <main+0x50>
		}
		while(PIND & (1<<1)){
			asm("nop");
 130:	00 00       	nop
		}
		
		if(PIND & (1<<1)){
			counter = counter - 1;
		}
		while(PIND & (1<<1)){
 132:	49 99       	sbic	0x09, 1	; 9
 134:	fd cf       	rjmp	.-6      	; 0x130 <main+0x4e>
			asm("nop");
		}
			
		if(counter < 0){
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13e:	99 23       	and	r25, r25
 140:	34 f4       	brge	.+12     	; 0x14e <main+0x6c>
			counter = 15;
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
			
		switch(counter){
 14e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 152:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 156:	e0 31       	cpi	r30, 0x10	; 16
 158:	f1 05       	cpc	r31, r1
 15a:	98 f5       	brcc	.+102    	; 0x1c2 <main+0xe0>
 15c:	ec 5c       	subi	r30, 0xCC	; 204
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	0c 94 27 01 	jmp	0x24e	; 0x24e <__tablejump2__>
			case 0:
				PORTB = 0B00111111;
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	85 b9       	out	0x05, r24	; 5
				break;
 168:	2c c0       	rjmp	.+88     	; 0x1c2 <main+0xe0>
			case 1:
				PORTB = 0B00000011;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	85 b9       	out	0x05, r24	; 5
				break;
 16e:	29 c0       	rjmp	.+82     	; 0x1c2 <main+0xe0>
			case 2:
				PORTB = 0B01011110;
 170:	8e e5       	ldi	r24, 0x5E	; 94
 172:	85 b9       	out	0x05, r24	; 5
				break;
 174:	26 c0       	rjmp	.+76     	; 0x1c2 <main+0xe0>
			case 3:
				PORTB = 0B01001111;
 176:	8f e4       	ldi	r24, 0x4F	; 79
 178:	85 b9       	out	0x05, r24	; 5
				break;
 17a:	23 c0       	rjmp	.+70     	; 0x1c2 <main+0xe0>
			case 4:
				PORTB = 0B01100011;
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	85 b9       	out	0x05, r24	; 5
				break;
 180:	20 c0       	rjmp	.+64     	; 0x1c2 <main+0xe0>
			case 5:
				PORTB = 0B01101101;
 182:	8d e6       	ldi	r24, 0x6D	; 109
 184:	85 b9       	out	0x05, r24	; 5
				break;
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <main+0xe0>
			case 6:
				PORTB = 0B01111101;
 188:	8d e7       	ldi	r24, 0x7D	; 125
 18a:	85 b9       	out	0x05, r24	; 5
				break;
 18c:	1a c0       	rjmp	.+52     	; 0x1c2 <main+0xe0>
			case 7:
				PORTB = 0B00000111;
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	85 b9       	out	0x05, r24	; 5
				break;
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <main+0xe0>
			case 8:
				PORTB = 0B01111111;
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	85 b9       	out	0x05, r24	; 5
				break;
 198:	14 c0       	rjmp	.+40     	; 0x1c2 <main+0xe0>
			case 9:
				PORTB = 0B01100111;
 19a:	87 e6       	ldi	r24, 0x67	; 103
 19c:	85 b9       	out	0x05, r24	; 5
				break;
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <main+0xe0>
			case 10:
				PORTB = 0B01110111;
 1a0:	87 e7       	ldi	r24, 0x77	; 119
 1a2:	85 b9       	out	0x05, r24	; 5
				break;
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <main+0xe0>
			case 11:
				PORTB = 0B01111001;
 1a6:	89 e7       	ldi	r24, 0x79	; 121
 1a8:	85 b9       	out	0x05, r24	; 5
				break;
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <main+0xe0>
			case 12:
				PORTB = 0B00111100;
 1ac:	8c e3       	ldi	r24, 0x3C	; 60
 1ae:	85 b9       	out	0x05, r24	; 5
				break;
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <main+0xe0>
			case 13:
				PORTB = 0B01011011;
 1b2:	8b e5       	ldi	r24, 0x5B	; 91
 1b4:	85 b9       	out	0x05, r24	; 5
				break;
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <main+0xe0>
			case 14:
				PORTB = 0B01111100;
 1b8:	8c e7       	ldi	r24, 0x7C	; 124
 1ba:	85 b9       	out	0x05, r24	; 5
				break;
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0xe0>
			case 15:
				PORTB = 0B01110100;
 1be:	84 e7       	ldi	r24, 0x74	; 116
 1c0:	85 b9       	out	0x05, r24	; 5
				break;
		}
		
		if(PIND & (1<<2)){
 1c2:	4a 9b       	sbis	0x09, 2	; 9
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <main+0xec>
			eeprom_write();
 1c6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <eeprom_write>
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <main+0xec>
		}
		while(PIND & (1<<2)){
			asm("nop");
 1cc:	00 00       	nop
		}
		
		if(PIND & (1<<2)){
			eeprom_write();
		}
		while(PIND & (1<<2)){
 1ce:	4a 99       	sbic	0x09, 2	; 9
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <main+0xea>
			asm("nop");
		}
	
		if(PIND & (1<<3)){
 1d2:	4b 9b       	sbis	0x09, 3	; 9
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <main+0xfc>
			eeprom_read();
 1d6:	0e 94 03 01 	call	0x206	; 0x206 <eeprom_read>
 1da:	01 c0       	rjmp	.+2      	; 0x1de <main+0xfc>
		}
		while(PIND & (1<<3)){
			asm("nop");
 1dc:	00 00       	nop
		}
	
		if(PIND & (1<<3)){
			eeprom_read();
		}
		while(PIND & (1<<3)){
 1de:	4b 99       	sbic	0x09, 3	; 9
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <main+0xfa>
 1e2:	81 cf       	rjmp	.-254    	; 0xe6 <main+0x4>

Disassembly of section .text.libgcc:

0000024e <__tablejump2__>:
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	05 90       	lpm	r0, Z+
 254:	f4 91       	lpm	r31, Z
 256:	e0 2d       	mov	r30, r0
 258:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00000262 <_fini>:
 262:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000264 <__funcs_on_exit>:
 264:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000266 <__simulator_exit>:
 266:	08 95       	ret

Disassembly of section .text.exit:

00000228 <exit>:
 228:	ec 01       	movw	r28, r24
 22a:	0e 94 32 01 	call	0x264	; 0x264 <__funcs_on_exit>
 22e:	0e 94 31 01 	call	0x262	; 0x262 <_fini>
 232:	ce 01       	movw	r24, r28
 234:	0e 94 33 01 	call	0x266	; 0x266 <__simulator_exit>
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 2f 01 	call	0x25e	; 0x25e <_Exit>

Disassembly of section .text._Exit:

0000025e <_Exit>:
 25e:	0e 94 6f 00 	call	0xde	; 0xde <_exit>
