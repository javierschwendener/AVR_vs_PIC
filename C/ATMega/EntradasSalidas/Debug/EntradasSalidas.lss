
EntradasSalidas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002b9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bf  00000000  00000000  000002ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001e8  000001e8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setup   00000010  000001d8  000001d8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000100  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.supnibble 00000002  00800100  00800100  0000028a  2**0
                  ALLOC
 16 .bss.infnibble 00000002  00800102  00800102  0000028a  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  000001f0  000001f0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000001f2  000001f2  00000286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000001f4  000001f4  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000001c2  000001c2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000001ec  000001ec  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
   8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
   c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  18:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  1c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  20:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  2c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  38:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  3c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  40:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  48:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  4c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  50:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  58:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  5c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  60:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001e8 <__bad_interrupt>:
 1e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.setup:

000001d8 <setup>:
int	infnibble = 0;
int supnibble = 0;

void setup(void){
	// Puertos B y C como salidas
	DDRB = 0b11111111;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
 1dc:	87 b9       	out	0x07, r24	; 7
	// Puerto D como entrada
	DDRD = 0b00000000;
 1de:	1a b8       	out	0x0a, r1	; 10
	
	// Se establece el valor de los puertos como 0
	PORTB = 0;
 1e0:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 1e2:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 1e4:	1b b8       	out	0x0b, r1	; 11
 1e6:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
}

int main(void)
{
	// Se ejecuta la configuracion de los puertos
	setup();
  c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <setup>
    while(1)
    {
		// CONTADOR 1
		// Suma
		if(PIND & (1<<0)){
  c6:	48 9b       	sbis	0x09, 0	; 9
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <main+0x1e>
			infnibble = infnibble + 1;
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <infnibble>
  ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <infnibble+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <infnibble+0x1>
  d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <infnibble>
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x1e>
		}
		// Antirebote
		while(PIND & (1<<0)){
			asm("nop");
  de:	00 00       	nop
		// Suma
		if(PIND & (1<<0)){
			infnibble = infnibble + 1;
		}
		// Antirebote
		while(PIND & (1<<0)){
  e0:	48 99       	sbic	0x09, 0	; 9
  e2:	fd cf       	rjmp	.-6      	; 0xde <main+0x1c>
			asm("nop");
		}
		// Proteccion de overflow
		if(infnibble > 15){ //0b00001111
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <infnibble>
  e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <infnibble+0x1>
  ec:	40 97       	sbiw	r24, 0x10	; 16
  ee:	24 f0       	brlt	.+8      	; 0xf8 <main+0x36>
			infnibble = 0;
  f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <infnibble+0x1>
  f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <infnibble>
		}
		// Resta
		if(PIND & (1<<1)){
  f8:	49 9b       	sbis	0x09, 1	; 9
  fa:	0b c0       	rjmp	.+22     	; 0x112 <main+0x50>
			infnibble = infnibble - 1;
  fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <infnibble>
 100:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <infnibble+0x1>
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <infnibble+0x1>
 10a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <infnibble>
 10e:	01 c0       	rjmp	.+2      	; 0x112 <main+0x50>
		}
		// Antirebote
		while(PIND & (1<<1)){
			asm("nop");
 110:	00 00       	nop
		// Resta
		if(PIND & (1<<1)){
			infnibble = infnibble - 1;
		}
		// Antirebote
		while(PIND & (1<<1)){
 112:	49 99       	sbic	0x09, 1	; 9
 114:	fd cf       	rjmp	.-6      	; 0x110 <main+0x4e>
			asm("nop");
		}
		// Proteccion de underflow
		if(infnibble < 0){ //0b00000000
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <infnibble>
 11a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <infnibble+0x1>
 11e:	99 23       	and	r25, r25
 120:	34 f4       	brge	.+12     	; 0x12e <main+0x6c>
			infnibble = 15;
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <infnibble+0x1>
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <infnibble>
		}
		
		// CONTADOR 2
		// Suma
		if(PIND & (1<<2)){
 12e:	4a 9b       	sbis	0x09, 2	; 9
 130:	0b c0       	rjmp	.+22     	; 0x148 <main+0x86>
			supnibble = supnibble + 1;
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 144:	01 c0       	rjmp	.+2      	; 0x148 <main+0x86>
		}
		// Antirebote
		while(PIND & (1<<2)){
			asm("nop");
 146:	00 00       	nop
		// Suma
		if(PIND & (1<<2)){
			supnibble = supnibble + 1;
		}
		// Antirebote
		while(PIND & (1<<2)){
 148:	4a 99       	sbic	0x09, 2	; 9
 14a:	fd cf       	rjmp	.-6      	; 0x146 <main+0x84>
			asm("nop");
		}
		// Proteccion de overflow
		if(supnibble > 15){ //0b00001111
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 150:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 154:	40 97       	sbiw	r24, 0x10	; 16
 156:	24 f0       	brlt	.+8      	; 0x160 <main+0x9e>
			supnibble = 0;
 158:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 15c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		// Resta
		if(PIND & (1<<3)){
 160:	4b 9b       	sbis	0x09, 3	; 9
 162:	0b c0       	rjmp	.+22     	; 0x17a <main+0xb8>
			supnibble = supnibble - 1;
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 176:	01 c0       	rjmp	.+2      	; 0x17a <main+0xb8>
		}
		// Antirebote
		while(PIND & (1<<3)){
			asm("nop");
 178:	00 00       	nop
		// Resta
		if(PIND & (1<<3)){
			supnibble = supnibble - 1;
		}
		// Antirebote
		while(PIND & (1<<3)){
 17a:	4b 99       	sbic	0x09, 3	; 9
 17c:	fd cf       	rjmp	.-6      	; 0x178 <main+0xb6>
			asm("nop");
		}
		// Proteccion de underflow
		if(supnibble < 0){ //0b00000000
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 186:	99 23       	and	r25, r25
 188:	34 f4       	brge	.+12     	; 0x196 <main+0xd4>
			supnibble = 15;
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		
		// Mostrar los resultados en el puerto B
		PORTB = (16*supnibble) + infnibble;
 196:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <infnibble>
 19e:	20 e1       	ldi	r18, 0x10	; 16
 1a0:	92 9f       	mul	r25, r18
 1a2:	80 0d       	add	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	85 b9       	out	0x05, r24	; 5
		
		// SUMA DE CONTADORES
		if(PIND & (1<<4)){
 1a8:	4c 9b       	sbis	0x09, 4	; 9
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <main+0xfa>
			PORTC = supnibble + infnibble;
 1ac:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <infnibble>
 1b4:	89 0f       	add	r24, r25
 1b6:	88 b9       	out	0x08, r24	; 8
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <main+0xfa>
		}
		// Antirebote
		while(PIND & (1<<4)){
			asm("nop");
 1ba:	00 00       	nop
		// SUMA DE CONTADORES
		if(PIND & (1<<4)){
			PORTC = supnibble + infnibble;
		}
		// Antirebote
		while(PIND & (1<<4)){
 1bc:	4c 99       	sbic	0x09, 4	; 9
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <main+0xf8>
 1c0:	82 cf       	rjmp	.-252    	; 0xc6 <main+0x4>

Disassembly of section .text.__dummy_fini:

000001f0 <_fini>:
 1f0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001f2 <__funcs_on_exit>:
 1f2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001f4 <__simulator_exit>:
 1f4:	08 95       	ret

Disassembly of section .text.exit:

000001c2 <exit>:
 1c2:	ec 01       	movw	r28, r24
 1c4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__funcs_on_exit>
 1c8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_fini>
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__simulator_exit>
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Exit>

Disassembly of section .text._Exit:

000001ec <_Exit>:
 1ec:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
